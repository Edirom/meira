<?xml version="1.0" encoding="UTF-8" ?>
<elementDefinition
    xmlns="NS:DEF"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xlink="http://www.w3.org/1999/xlink">

<!-- TODO: - Provide global settings for line widths and local attributes to override them -->

<element name="keySignature">
  <properties>
    <elementReference name="start" lacuna=".."/>
    
    <coordinate name="x" orientation="x" anchor="g:x(g:start(.))" lacuna="0"/>
    <coordinate name="y" orientation="y" anchor="g:y(..)" lacuna="0"/>
    
    <coordinate name="x1" orientation="x" anchor="g:x(.)" lacuna="0"/>
    <coordinate name="x2" orientation="x" anchor="g:x(.)" lacuna="0"/>
    <coordinate name="y1" orientation="y" anchor="g:y(.)" lacuna="0"/>
    <coordinate name="y2" orientation="y" anchor="g:y(.)" lacuna="0"/>
    
    <scaleFactor name="size" anchor="g:size(..)" lacuna="1"/>
    
    <symbol name="symbol" lacuna="''"/>
    
    <!-- TODO: Find more appropriate parameters. These here are
             technically useful, but maybe not for humans. -->
    <!-- @pattern provides a list of "steps" that tell us where 
         on which lines/in which spaces to place the accidentals. -->
    <string name="pattern" lacuna="''"/>
    <scaleFactor name="distance" anchor="g:size(.)" lacuna="2"/>
  </properties>

  <draw>
    <xsl:variable name="steps" select="tokenize(normalize-space(g:pattern(.)),'\s+')" as="xs:string*"/>
    <xsl:variable name="staffSize" select="g:staffSize(.)" as="xs:double"/>
    <xsl:variable name="distance" select="g:distance(.) div $staffSize" as="xs:double"/>
    <xsl:variable name="symbol" select="g:symbol(.)"/>
    <svg:g transform="translate({g:x(.)},{g:y(.)}) scale({$staffSize})">
      <xsl:for-each select="$steps">
        <svg:use x="{(position()-1) * $distance}" y="{number(.)}" xlink:href="{$symbol}"/>
      </xsl:for-each>
    </svg:g>
  </draw>
  
  <OwnBoundingBox>
    <xsl:variable name="x" select="g:x(.)"/>
    <xsl:variable name="y" select="g:y(.)"/>
    <xsl:variable name="size" select="g:size(.)"/>
    <xsl:variable name="staffSize" select="g:staffSize(.)"/>
    <xsl:variable name="symbolBBox" select="g:svgSymbolBoundingBox(g:symbol(.))" as="element()"/>
    <xsl:variable name="steps" as="xs:integer*">
      <xsl:for-each select="tokenize(normalize-space(g:pattern(.)),'\s+')">
        <xsl:sequence select=". cast as xs:integer"/>
      </xsl:for-each>
    </xsl:variable>
    
    <xsl:message>
      steps = <xsl:value-of select="count($steps)"/>
      distance = <xsl:value-of select="g:distance(.)"/>
    </xsl:message>
    
    <!-- TODO: BoundingBox is too wide. Why? -->
    <BoundingBox left="{$x}" 
                 right="{$x + count($steps)*g:distance(.) + ($symbolBBox/@right cast as xs:double)*$size}"
                 top="{   $y + min($steps)*$staffSize + ($symbolBBox/@top    cast as xs:double)*$size}"
                 bottom="{$y + max($steps)*$staffSize + ($symbolBBox/@bottom cast as xs:double)*$size}"/>
  </OwnBoundingBox>
</element>

</elementDefinition>