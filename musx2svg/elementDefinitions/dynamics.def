<?xml version="1.0" encoding="UTF-8" ?>
<?xml-stylesheet type='text/xsl' href='def2xsl.xsl'?>
<elementDefinition
    xmlns="NS:DEF"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xlink="http://www.w3.org/1999/xlink">

  <!-- The to be rendered symbol may be provided by @symbol or
       a <string> child element, especially for a sequence of symbols
       like "sfz". -->

<element name="dynamics">
	<properties>
		<elementReference name="start" lacuna=".."/>
		
		<relativeCoordinate name="x" anchor="g:x(g:start(.))" lacuna="0"/>
		<relativeCoordinate name="y" anchor="g:y(..)" lacuna="0"/>
		
		<relativeCoordinate name="x1" anchor="g:x(.)" lacuna="0"/>
		<relativeCoordinate name="x2" anchor="g:x(.)" lacuna="0"/>
		<relativeCoordinate name="y1" anchor="g:y(.)" lacuna="0"/>
		<relativeCoordinate name="y2" anchor="g:y(.)" lacuna="0"/>
		
		<scaleFactor name="size" anchor="g:size(..)" lacuna="1"/>
		
	</properties>

  <xsl:template match="dynamics[not(@symbol)]" priority="2">
    <xsl:apply-templates/>
  </xsl:template>

	<draw svg:fill="currentColor">
		<svg:use transform="translate({g:x(.)},{g:y(.)}) scale({g:size(.)})" xlink:href="{g:symbol(.)}"/>
	</draw>
</element>

</elementDefinition>