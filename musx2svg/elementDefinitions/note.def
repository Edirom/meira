<?xml version="1.0" encoding="UTF-8" ?>
<elementDefinition
    xmlns="NS:DEF"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xlink="http://www.w3.org/1999/xlink">

<!-- QUESTION: Any good advice on XPath code formatting/indentation? -->
<element name="note">
  <properties>
    <elementReference name="start" lacuna=".."/>
    
    <coordinate name="x" orientation="x" anchor="g:x(g:start(.))" lacuna="0"/>
    <coordinate name="y" orientation="y" anchor="g:y(..)" lacuna="0"/>
    
    <coordinate name="x1" orientation="x" anchor="g:x(.)" lacuna="0"/>
    <coordinate name="x2" orientation="x" anchor="g:x(.)" lacuna="0"/>
    <coordinate name="y1" orientation="y" anchor="g:y(.)" lacuna="0"/>
    <coordinate name="y2" orientation="y" anchor="g:y(.)" lacuna="0"/>
    
    <integer name="ledgerLines.direction" lacuna="if (g:step(.) lt 0)
                                                  then -1
                                                  else 1"/>
    <coordinate name="ledgerLines.y1" orientation="y" lacuna="0" anchor="
      for $staff in ancestor::musx:staff[last()] return
        if (g:ledgerLines.direction(.) &lt; 0)
        then g:y1($staff) - 2*g:size($staff)
        else g:y2($staff) + 2*g:size($staff)"/>
    <!-- QUESTION: Is it necessary to refine this? -->
    <coordinate name="ledgerLines.y2" orientation="y" anchor="g:y(.)" lacuna="0"/>
    <boolean name="ledgerLines.draw" lacuna="g:step(.) &lt; -1 or g:step(.) &gt; 9"/>
    <scaleFactor name="ledgerLines.protrusion" anchor="g:size(..)" lacuna=".75"/>
    
    <scaleFactor name="size" anchor="g:size(..)" lacuna="1"/>
    
    <!-- Following the SVG coordinate system, "1" means stem down, "-1" means stem up -->
    <!-- QUESTION: Is there a general rule for staffs with other than 5 lines?
                   Especially, what about staffs with an even number of liens?
                   What about staffs with 1 or 0 lines? -->
    <integer name="direction" lacuna="
        if (musx:stem/@direction)
        then g:direction(musx:stem[@direction][1])
        else g:calculateDirection(.)"/>

    <!-- The following is only meant to implement a getter function g:step(.). 
         QUESTION: Prevent this from being explicitly set as an attribute? -->
    <!-- Usually, @y should be given with the 'S' unit.  The else branch would work for
         any unit, but is much more inefficient for the typical case. -->
    <number name="step" lacuna="
          if(substring(@y,1,1)='S')
          then number(substring(@y,2))
          else (g:y(.) - g:y(ancestor::musx:staff[last()])) div g:staffSize(.)"/>
    
  </properties>
  
  <xsl:template name="addLedgerLines">
    <!-- QUESTION: Allow shortened ledger lines after accidentals? (like Lilypond) -->
    <!-- $direction is set to -1 if head is above staff, else 1 -->
    <xsl:param name="direction" select="g:ledgerLines.direction(.)"/>
    <xsl:param name="staffSize" select="g:staffSize(.)"/>
    <xsl:param name="increment" select="2 * $direction * $staffSize"/>
    <xsl:param name="y" select="g:ledgerLines.y1(.)"/>
    <xsl:param name="headBoundingBox" select="g:OwnBoundingBox(musx:head)"/>
    <xsl:param name="protrusion"  select="g:ledgerLines.protrusion(.)"/>
    <xsl:param name="x1" select="number($headBoundingBox//@left) - $protrusion"/>
    <xsl:param name="x2" select="number($headBoundingBox//@right) + $protrusion"/>
    <xsl:param name="finalYPlusTolerance" select="$direction * g:y(.) + .5 * $staffSize"/>
           <!-- Added tolerance ".5 * $staffSize" is for avoiding missed ledgerLines because of rounding errors -->
    
    <xsl:if test="$direction*$y &lt; $finalYPlusTolerance">
      <svg:line x1="{$x1}" x2="{$x2}" y1="{$y}" y2="{$y}"/>
      <xsl:call-template name="addLedgerLines">
        <xsl:with-param name="increment" select="$increment"/>
        <xsl:with-param name="y" select="$y + $increment"/>
        <xsl:with-param name="x1" select="$x1"/>
        <xsl:with-param name="x2" select="$x2"/>
        <xsl:with-param name="finalYPlusTolerance" select="$finalYPlusTolerance"/>
      </xsl:call-template>
    </xsl:if>
  </xsl:template>
  
  <draw>
    <svg:g class="ledgerlines" stroke="currentColor">
      <xsl:call-template name="addLedgerLines"/>
    </svg:g>
  </draw>
  
  <OwnBoundingBox>
    <xsl:if test="g:ledgerLines.draw(.)">
      <xsl:variable name="headBoundingBox" select="g:OwnBoundingBox(musx:head)"/>
      <xsl:variable name="protrusion" select="g:ledgerLines.protrusion(.)"/>
      <xsl:variable name="y1" select="g:ledgerLines.y1(.)"/>
      <xsl:variable name="headY" select="g:y(musx:head)"/>
      <BoundingBox left="{number($headBoundingBox//@left) - $protrusion}"
                   right="{number($headBoundingBox//@right) + $protrusion}"
                   top="{min(($headY,$y1))}"
                   bottom="{max(($headY,$y1))}"/>
    </xsl:if>
  </OwnBoundingBox>

</element>
  
<element name="head">
  <properties>
    <coordinate name="x" orientation="x" anchor="g:x(g:start(.))" lacuna="
      if (g:flip(.) = 0)
      then 0
      else g:flip(.) * g:width(.)"/>
    <coordinate name="y" orientation="y" anchor="g:y(..)" lacuna="0"/>
    
    <coordinate name="x1" orientation="x" anchor="g:x(.)" lacuna="0"/>
    <coordinate name="x2" orientation="x" anchor="g:x(.)" lacuna="0"/>
    <coordinate name="y1" orientation="y" anchor="g:y(.)" lacuna="0"/>
    <coordinate name="y2" orientation="y" anchor="g:y(.)" lacuna="0"/>
    
    <scaleFactor name="width" anchor="g:size(.)" lacuna="number(g:svgSymbolBoundingBox(g:symbol(.))//@right)"/>
    
    <integer name="flip" lacuna="
      if(../parent::musx:chord)
      then (
        for $chordDirection in g:direction(../..),
            $noteStep in g:step(..),
            $collisionStep in $noteStep - $chordDirection,
            $otherNote in ../../musx:note
        return
          if (g:step($otherNote) = $collisionStep)
          then (g:flip($otherNote/musx:head) - $chordDirection) mod 2
          else ()
      )[1]
      else 0"/>
    
    <scaleFactor name="size" anchor="g:size(..)" lacuna="1"/>
    
    <symbol name="symbol" lacuna="'notehead.quarter'"/>
    
  </properties>

  <!-- TODO: We might be referencing stroked symbols. Put svg:fill into symbol.svg? 
             Would that have the desired effect? -->
  <draw svg:fill="currentColor">
    <svg:use transform="translate({g:x(.)},{g:y(.)}) scale({g:size(.)})" xlink:href="{g:symbol(.)}"/>
  </draw>
  
</element>

<element name="accidental">
  <properties>
    <coordinate name="x" orientation="x" anchor="g:x(..)" lacuna="-3*g:size(.)"/>
    <coordinate name="y" orientation="y" anchor="g:y(..)" lacuna="0"/>
    
    <coordinate name="x1" orientation="x" anchor="g:x(.)" lacuna="0"/>
    <coordinate name="x2" orientation="x" anchor="g:x(.)" lacuna="0"/>
    <coordinate name="y1" orientation="y" anchor="g:y(.)" lacuna="0"/>
    <coordinate name="y2" orientation="y" anchor="g:y(.)" lacuna="0"/>
    
    <scaleFactor name="size" anchor="g:size(..)" lacuna="1"/>
    
    <symbol name="symbol" lacuna="''"/>
    
  </properties>
  
  <draw>
    <svg:use transform="translate({g:x(.)},{g:y(.)}) scale({g:size(.)})" xlink:href="{g:symbol(.)}"/>
  </draw>
  
</element>
  
<element name="chord">
  <properties>
    <elementReference name="start" lacuna=".."/>
    
    <elementReference name="topNote" lacuna="musx:note[g:step(.) = min(g:step(../musx:note))][1]"/>
    <elementReference name="bottomNote" lacuna="musx:note[g:step(.) = max(g:step(../musx:note))][1]"/>
    <integer name="direction" lacuna="
        if (musx:stem/@direction)
        then g:direction(musx:stem[1])
        else g:calculateDirection(.)"/>
    
    <coordinate name="x" orientation="x" anchor="g:x(g:start(.))" lacuna="0"/>
    <coordinate name="y1" orientation="y" anchor="
      if (g:direction(.) = -1)
      then g:y(g:bottomNote(.))
      else g:y(g:topNote(.))       " lacuna="0"/>
    <coordinate name="y2" orientation="y" anchor="
      if (g:direction(.) = 1)
      then g:y(g:bottomNote(.))
      else g:y(g:topNote(.))      " lacuna="0"/>
    
    <coordinate name="x1" orientation="x" anchor="g:x(.)" lacuna="0"/>
    <coordinate name="x2" orientation="x" anchor="g:x(.)" lacuna="0"/>

    <coordinate name="y" orientation="y" anchor="g:y1(.)" lacuna="0"/>
    
    <scaleFactor name="size" anchor="g:size(..)" lacuna="1"/>
    
  </properties>
  
  
<!--  <xsl:key name="stemOfNote" match="musx:stem" use="generate-id(parent::*//musx:note)"/>
  <xsl:key name="notesOnStem" match="musx:note" use="generate-id((.|parent::musx:chord)/musx:stem)"/>
  <xsl:key name="topNoteOnStem" match="musx:note" use="for $step in g:step(.),
                                                           $stemID in generate-id(key('stemOfNote',generate-id())),
                                                           $topStepOnStem in min(g:step(key('notesOnStem',$stemID))) 
                                                       return $stemID[$step = $topStepOnStem]"/>
  <xsl:key name="bottomNoteOnStem" match="musx:note" use="for $step in g:step(.),
                                                              $stemID in generate-id(key('stemOfNote',generate-id())),
                                                              $topStepOnStem in min(g:step(key('notesOnStem',$stemID))) 
                                                          return $stemID[$step = $topStepOnStem]"/>
  <xsl:key name="stemsOfBeam" match="stem" use="@beam"/>
  
  <xsl:key name="beamByDirection" match="musx:beam" use="g:direction(.)"/>-->
  
<!--  <xsl:key name="stemNotesClosestToBeam" 
      match="(: Selects (top|bottom) notes of all stems that belong to (upwards|downwards) beams :)
              key('topNote'   ,key('stemsOfBeam',key('beamByDirection',-1)/@xml:id))|
              key('bottomNote',key('stemsOfBeam',key('beamByDirection', 1)/@xml:id))" 
      use="(.|parent::musx:chord)/musx:stem/@beam"/>-->
  
  <xsl:key name="topNote"    match="musx:note[g:step(.) = min(g:step(key('beamNotes',ancestor-or-self::*/musx:stem/@beam)))]" use="generate-id(id(ancestor-or-self::*/musx:stem/@beam))"/>
  <xsl:key name="bottomNote" match="musx:note[g:step(.) = max(g:step(key('beamNotes',ancestor-or-self::*/musx:stem/@beam)))]" use="generate-id(id(ancestor-or-self::*/musx:stem/@beam))"/>
  <xsl:key name="topNote"    match="musx:note[g:step(.) = min(g:step(parent::musx:chord/musx:note))]"                         use="generate-id(parent::musx:chord)"/>
  <xsl:key name="bottomNote" match="musx:note[g:step(.) = max(g:step(parent::musx:chord/musx:note))]"                         use="generate-id(parent::musx:chord)"/>
  
  
  
  <!-- What about chords under beams? We need the "furthest chord", i.e. the chord with the 
       "furthest closest note" (makes sense?) -->
<!--  <xsl:key name="chordNoteFurthestFromBeam" 
      match="key('topNote'   ,key('beamByDirection', 1)/@xml:id)|
             key('bottomNote',key('beamByDirection',-1)/@xml:id)" 
      use="(.|parent::musx:chord)/musx:stem/@beam"/>-->
  
  <!-- This function is used by single notes, chords and beams. The 'beamNotes' key is defined there. --> 
  <xsl:function name="g:calculateDirection" as="xs:integer">
    <xsl:param name="element" as="node()"/>

    <xsl:variable name="notes" select="$element/(self::musx:note, self::musx:chord/musx:note, key('beamNotes',@xml:id))"/>
    <xsl:variable name="genID" select="generate-id($element)" as="xs:string"/>
    <xsl:variable name="staffCenter" select="g:lines($notes[1]/ancestor::musx:staff[last()]) - 1" as="xs:integer"/>

    <!-- if average of top and bottom note is above staff center, stem goes down, otherwise up
         (if $element is a note, avg(...) returns the note's own step) -->
    <xsl:sequence select="
        if (avg(
              for $note in (key('topNote',$genID,$element),key('bottomNote',$genID,$element),$element/self::musx:note) 
              return g:step($note)
           ) gt $staffCenter)
        then -1
        else 1"/>
  </xsl:function>
  
  <draw/>
</element>
  
</elementDefinition> 